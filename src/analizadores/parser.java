
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 02 13:30:58 CST 2021
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Jun 02 13:30:58 CST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\006\006" +
    "\000\002\005\003\000\002\007\003\000\002\007\002\000" +
    "\002\011\004\000\002\011\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\012\003\000\002\012" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\014\012\000\002\015\006\000\002" +
    "\015\002\000\002\016\011\000\002\017\006\000\002\020" +
    "\005\000\002\021\004\000\002\022\007\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\022\002\ufff9\005\025\037\013\041\005\042" +
    "\020\043\026\044\017\045\011\001\002\000\004\002\ufffb" +
    "\001\002\000\004\035\116\001\002\000\020\002\ufff9\005" +
    "\025\037\013\041\005\042\020\043\026\045\011\001\002" +
    "\000\022\002\uffe1\005\uffe1\036\uffe1\037\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\045\uffe1\001\002\000\022\002\uffe0\005\uffe0" +
    "\036\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0\045\uffe0\001" +
    "\002\000\010\005\033\022\036\025\057\001\002\000\022" +
    "\002\uffe2\005\uffe2\036\uffe2\037\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\045\uffe2\001\002\000\004\035\055\001\002\000\004" +
    "\002\054\001\002\000\006\002\ufffa\036\ufffa\001\002\000" +
    "\004\002\uffff\001\002\000\004\005\051\001\002\000\004" +
    "\027\050\001\002\000\022\002\ufff7\005\025\036\ufff7\037" +
    "\013\041\005\042\020\043\026\045\011\001\002\000\022" +
    "\002\ufffd\005\ufffd\037\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\017\045\ufffd\001\002\000\022\002\uffdf\005\uffdf\036\uffdf" +
    "\037\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf\001\002\000" +
    "\022\002\uffdd\005\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\001\002\000\004\006\032\001\002\000" +
    "\004\004\030\001\002\000\022\002\uffde\005\uffde\036\uffde" +
    "\037\uffde\041\uffde\042\uffde\043\uffde\045\uffde\001\002\000" +
    "\004\027\031\001\002\000\022\002\uffe5\005\uffe5\036\uffe5" +
    "\037\uffe5\041\uffe5\042\uffe5\043\uffe5\045\uffe5\001\002\000" +
    "\010\005\033\022\036\025\034\001\002\000\032\007\ufff3" +
    "\010\ufff3\011\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\026\ufff3\027\ufff3\035\ufff3\036\ufff3\001\002\000\010" +
    "\005\033\022\036\025\034\001\002\000\010\017\041\020" +
    "\037\027\040\001\002\000\032\007\ufff4\010\ufff4\011\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\026\ufff4\027" +
    "\ufff4\035\ufff4\036\ufff4\001\002\000\010\005\033\022\036" +
    "\025\034\001\002\000\022\002\uffe6\005\uffe6\036\uffe6\037" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\001\002\000\010" +
    "\005\033\022\036\025\034\001\002\000\032\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\026\ufff6\027\ufff6\035\ufff6\036\ufff6\001\002\000\032\007" +
    "\ufff5\010\ufff5\011\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\026\ufff5\027\ufff5\035\ufff5\036\ufff5\001\002\000" +
    "\010\017\041\020\037\026\045\001\002\000\032\007\ufff2" +
    "\010\ufff2\011\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\026\ufff2\027\ufff2\035\ufff2\036\ufff2\001\002\000\020" +
    "\002\ufffe\005\ufffe\037\ufffe\041\ufffe\042\ufffe\043\ufffe\045" +
    "\ufffe\001\002\000\006\002\ufff8\036\ufff8\001\002\000\022" +
    "\002\uffe4\005\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\045\uffe4\001\002\000\004\005\052\001\002\000\004" +
    "\027\053\001\002\000\022\002\ufffc\005\ufffc\037\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\001\002\000\004" +
    "\002\001\001\002\000\010\005\033\022\036\025\057\001" +
    "\002\000\010\015\075\016\074\036\100\001\002\000\010" +
    "\005\033\022\036\025\057\001\002\000\016\007\061\010" +
    "\062\011\063\013\064\017\041\020\037\001\002\000\010" +
    "\005\033\022\036\025\034\001\002\000\010\005\033\022" +
    "\036\025\034\001\002\000\010\005\033\022\036\025\034" +
    "\001\002\000\010\005\033\022\036\025\034\001\002\000" +
    "\020\015\uffec\016\uffec\017\041\020\037\026\uffec\035\uffec" +
    "\036\uffec\001\002\000\020\015\uffed\016\uffed\017\041\020" +
    "\037\026\uffed\035\uffed\036\uffed\001\002\000\020\015\uffee" +
    "\016\uffee\017\041\020\037\026\uffee\035\uffee\036\uffee\001" +
    "\002\000\020\015\uffef\016\uffef\017\041\020\037\026\uffef" +
    "\035\uffef\036\uffef\001\002\000\010\015\075\016\074\026" +
    "\073\001\002\000\020\007\061\010\062\011\063\013\064" +
    "\017\041\020\037\026\045\001\002\000\014\015\uffeb\016" +
    "\uffeb\026\uffeb\035\uffeb\036\uffeb\001\002\000\010\005\033" +
    "\022\036\025\057\001\002\000\010\005\033\022\036\025" +
    "\057\001\002\000\014\015\ufff1\016\ufff1\026\ufff1\035\ufff1" +
    "\036\ufff1\001\002\000\014\015\ufff0\016\ufff0\026\ufff0\035" +
    "\ufff0\036\ufff0\001\002\000\004\035\101\001\002\000\020" +
    "\005\025\036\ufff9\037\013\041\005\042\020\043\026\045" +
    "\011\001\002\000\004\036\103\001\002\000\024\002\uffe8" +
    "\005\uffe8\036\uffe8\037\uffe8\040\104\041\uffe8\042\uffe8\043" +
    "\uffe8\045\uffe8\001\002\000\004\035\106\001\002\000\022" +
    "\002\uffea\005\uffea\036\uffea\037\uffea\041\uffea\042\uffea\043" +
    "\uffea\045\uffea\001\002\000\020\005\025\036\ufff9\037\013" +
    "\041\005\042\020\043\026\045\011\001\002\000\004\036" +
    "\110\001\002\000\022\002\uffe9\005\uffe9\036\uffe9\037\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\045\uffe9\001\002\000\010\015" +
    "\075\016\074\035\112\001\002\000\020\005\025\036\ufff9" +
    "\037\013\041\005\042\020\043\026\045\011\001\002\000" +
    "\004\036\114\001\002\000\022\002\uffe3\005\uffe3\036\uffe3" +
    "\037\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\001\002\000" +
    "\004\002\000\001\002\000\010\005\033\022\036\025\057" +
    "\001\002\000\010\015\075\016\074\036\120\001\002\000" +
    "\004\035\121\001\002\000\020\005\025\036\ufff9\037\013" +
    "\041\005\042\020\043\026\045\011\001\002\000\004\036" +
    "\123\001\002\000\022\002\uffe7\005\uffe7\036\uffe7\037\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\045\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\034\003\013\004\005\005\015\006\021\007" +
    "\003\010\020\011\014\014\011\016\006\017\007\020\022" +
    "\021\023\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\114\007\003\010\020\011\014\014\011" +
    "\016\006\017\007\020\022\021\023\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\057\013\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\020\011\046\014\011\016" +
    "\006\017\007\020\022\021\023\022\026\001\001\000\006" +
    "\004\045\006\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\034\001" +
    "\001\000\002\001\001\000\004\012\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\042\001\001\000" +
    "\002\001\001\000\004\012\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\057\013\055\001\001\000\002\001\001" +
    "\000\006\012\071\013\070\001\001\000\002\001\001\000" +
    "\004\012\067\001\001\000\004\012\066\001\001\000\004" +
    "\012\065\001\001\000\004\012\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\057\013\076\001\001\000\006\012\057\013\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\101\010\020\011\014\014\011\016\006" +
    "\017\007\020\022\021\023\022\026\001\001\000\002\001" +
    "\001\000\004\015\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\106\010\020\011\014\014\011\016" +
    "\006\017\007\020\022\021\023\022\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\112\010\020\011\014\014\011\016\006\017\007\020\022" +
    "\021\023\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\057\013\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\121\010" +
    "\020\011\014\014\011\016\006\017\007\020\022\021\023" +
    "\022\026\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia ::= SentenciaBreak 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sentencia ::= SentenciaSwitch 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sentencia ::= SentenciaPuts 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Sentencia ::= SentenciaAsignacion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Sentencia ::= SentenciaWhile 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Sentencia ::= SentenciaIf 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SentenciaSwitch ::= SWITCH Condicion INICIOLLAVE BloqueSentencias FINLLAVE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*SentenciaSwitch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SentenciaBreak ::= BREAK PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*SentenciaBreak*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentenciaPuts ::= PUTS CADENATEXTO PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*SentenciaPuts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentenciaAsignacion ::= IDENTIFICADOR ASIGNAR Expresion PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*SentenciaAsignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SentenciaWhile ::= WHILE INICIOLLAVE Condicion FINLLAVE INICIOLLAVE BloqueSentencias FINLLAVE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*SentenciaWhile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SentenciaElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*SentenciaElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SentenciaElse ::= ELSE INICIOLLAVE BloqueSentencias FINLLAVE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*SentenciaElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SentenciaIf ::= IF INICIOLLAVE Condicion FINLLAVE INICIOLLAVE BloqueSentencias FINLLAVE SentenciaElse 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*SentenciaIf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Condicion ::= LPAREN Condicion RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Condicion ::= Expresion MAYOR Expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Condicion ::= Expresion MENOR Expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Condicion ::= Expresion DISTINTO Expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Condicion ::= Expresion IGUAL Expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Condicion ::= Condicion AND Condicion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Condicion ::= Condicion OR Condicion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= LPAREN Expresion RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= ENTERO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expresion ::= Expresion RESTA Expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= Expresion SUMA Expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*Expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencias ::= Sentencia 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*Sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencias ::= Sentencia Sentencias 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*Sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueSentencias ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*BloqueSentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueSentencias ::= Sentencias 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*BloqueSentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cuerpo ::= BloqueSentencias 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*Cuerpo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= SET IDENTIFICADOR IDENTIFICADOR PTOCOMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*Declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Declaraciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaracion Declaraciones 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*Declaraciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Cuerpo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Declaraciones Cuerpo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

